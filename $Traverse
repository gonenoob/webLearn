.eq(index)
筛选匹配元素的集合为指定的索引的哪一个元素。

.filter(selector)
筛选元素集合中匹配表达式 或 通过传递函数测试的 那些元素集合。

.first()
获取匹配元素集合中第一个元素。
对应的.last()

.has(selector)
筛选匹配元素集合中的那些有相匹配的选择器或DOM元素的后代元素。

.is()
判断当前匹配的元素集合中的元素，是否为一个选择器，DOM元素，或者jQuery对象，如果这些元素至少一个匹配给定的参数，那么返回true。
.is(function(index))
function用来测试集合中的元素，index为元素在集合中的索引位置

.map(callback(index,domElement))
通过一个函数匹配当前集合中的每个元素,产生一个包含新的jQuery对象。

.not(selector)
从匹配的元素集合中移除指定的元素。

.slice(start[,end])
根据指定的下标范围，过滤匹配的元素集合，并生成一个新的 jQuery 对象。

.add() .each()

.end()
/*$('ul.first').find('.foo').css('background-color', 'red')
  .end().find('.bar').css('background-color', 'green');*/
首先在链式用法中只在第一个列表中查找样式为 foo 的项目，并将其背景色变成红色。
然后 end() 返回调用 find() 之前的状态。
因此，第二次 find() 将只会查找 <ul class="first"> 中的 '.bar'，
而不是继续在 <li class="foo"> 中进行查找，结果是将匹配到的元素的背景色变成绿色

//树遍历

.children()
.closest()
.find()
.next()
.nextAll()
.nextUntil()
.parent()
.parents()
.parentsUntil()

.prev()
取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合。选择性筛选的选择器。
.prevAll()
.prevUntil()

.siblings()
获得匹配元素集合中每个元素的兄弟元素,可以提供一个可选的选择器。
