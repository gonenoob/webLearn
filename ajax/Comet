
服务端渲染

ajax

SSE Server-Sent Events
    SSE是围绕只读Comet交互推出的API或者模式。
    SSE API用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。
    服务器响应的MIME类型必须是text/event-stream，而且是浏览器中的Javascript API能解析的格式输出。
    现对于Comet，我们可以看出我们只进行了一次连接，然后服务端会去控制数据的响应，从而发送给客户端。
    这样相对来说，但是如同定义的描述，这种只适合只读数据的情形。比如一些通知和状态码这样的。
    SEE的使用非常简单，只需要掌握这几个api就行：
    
    var es = new EventSource('http://your.api.com' 
    function listener(event) {  
        console.log(event.data);
    }
    // 创建一个SSE连接
    es.addEventListener("open", listener);  
    // 响应获取消息的事件
    es.addEventListener("message", listener);  
    // 发生错误
    es.addEventListener("error", listener);

Web Sockets
    HTML5 WebSocket 设计出来的目的就是要取代轮询和 Comet 技术，使客户端浏览器具备像 C/S 架构下桌面系统的实时通讯能力。
    浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。
    也就是我们可以使用web技术构建实时性的程序比如聊天游戏等应用。

    其实Web Sockets 的API很少，就下面这些
    websocket = new WebSocket("ws://your.socket.com:9001");  
    // 大开
    websocket.onopen = function(evt) { /* do stuff */ }; //on open event  
    // 当web socket关闭
    websocket.onclose = function(evt) { /* do stuff */ };  
    // 进行通信时
    websocket.onmessage = function(evt) { /* do stuff */ };  
    // 发生错误时
    websocket.onerror = function(evt) { /* do stuff */ };  
    // 向服务器发发送消息
    websocket.send(message); //send method  
    websocket.close(); //close method

  
客户端与服务端谁先主动，是否强调数据的实时性。

AJAX – 请求 → 响应 （频繁使用）
Comet – 请求 → 挂起 → 响应 （模拟服务端推送）
Server-Sent Events – 客户单 ← 服务端 （服务端推送）
WebSockets – 客户端 ↔ 服务端 (未来趋势,双工通信)

